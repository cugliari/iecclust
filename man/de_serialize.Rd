% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/de_serialize.R
\name{de_serialize}
\alias{de_serialize}
\alias{binarize}
\alias{binarizeTransform}
\alias{getDataInFile}
\alias{binarize}
\alias{binarizeTransform}
\alias{getDataInFile}
\title{(De)Serialization of a [big]matrix or data stream}
\usage{
binarize(data_ascii, data_bin_file, nb_per_chunk, sep = ",", nbytes = 4,
  endian = .Platform$endian)

binarizeTransform(getData, transform, data_bin_file, nb_per_chunk, nbytes = 4,
  endian = .Platform$endian)

getDataInFile(indices, data_bin_file, nbytes = 4, endian = .Platform$endian)
}
\arguments{
\item{data_ascii}{Matrix (by columns) or CSV file or connection (by rows)}

\item{data_bin_file}{Name of binary file on output of \code{binarize()}
or input of \code{getDataInFile()}}

\item{nb_per_chunk}{Number of lines to process in one batch}

\item{sep}{Separator in CSV input file (if any provided)}

\item{nbytes}{4 or 8 bytes to (de)serialize a floating-point number}

\item{endian}{Endianness for (de)serialization: "little" or "big"}

\item{getData}{Function to retrieve data chunks}

\item{transform}{Transformation function to apply on data chunks}

\item{indices}{Indices of the lines to retrieve}
}
\value{
For \code{getDataInFile()}, a matrix with columns corresponding to the
  requested indices. \code{binarizeTransform()} returns the number of processed lines.
  \code{binarize()} is designed to serialize in several calls, thus returns nothing.
}
\description{
\code{binarize()} serializes a matrix or CSV file with minimal overhead, into a
binary file. \code{getDataInFile()} achieves the inverse task: she retrieves (ASCII)
data rows from indices in the binary file. Finally, \code{binarizeTransform()}
serialize transformations of all data chunks. To use it a data-retrieval function
must be provided -- thus \code{binarize} will most likely be used first
(and then a function defined to seek in generated binary file)
}
